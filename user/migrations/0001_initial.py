# Generated by Django 4.2.4 on 2023-09-04 01:31

import uuid

from django.db import migrations, models

import user.manager


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="CustomUsers",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        verbose_name="uid",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(max_length=200, verbose_name="first name"),
                ),
                (
                    "middle_name",
                    models.CharField(max_length=200, verbose_name="middle name"),
                ),
                (
                    "last_name",
                    models.CharField(max_length=200, verbose_name="last name"),
                ),
                (
                    "username",
                    models.CharField(
                        blank=True,
                        max_length=200,
                        null=True,
                        unique=True,
                        verbose_name="username",
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        max_length=200, unique=True, verbose_name="email address"
                    ),
                ),
                (
                    "phone_number",
                    models.CharField(
                        max_length=15, unique=True, verbose_name="phone number"
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "postcode_zipcode",
                    models.CharField(
                        blank=True, max_length=9, null=True, verbose_name="postcode"
                    ),
                ),
                (
                    "address_line_1",
                    models.CharField(
                        blank=True,
                        max_length=255,
                        null=True,
                        verbose_name="address line 1",
                    ),
                ),
                (
                    "address_line_2",
                    models.CharField(
                        blank=True,
                        max_length=255,
                        null=True,
                        verbose_name="address line 2",
                    ),
                ),
                (
                    "apt_number",
                    models.CharField(
                        blank=True, max_length=10, null=True, verbose_name="building #"
                    ),
                ),
                (
                    "state",
                    models.CharField(
                        blank=True, max_length=100, null=True, verbose_name="state"
                    ),
                ),
                (
                    "town_city",
                    models.CharField(
                        blank=True, max_length=100, null=True, verbose_name="town, city"
                    ),
                ),
                (
                    "country",
                    models.CharField(
                        blank=True, max_length=150, null=True, verbose_name="country"
                    ),
                ),
                (
                    "country_code",
                    models.CharField(
                        blank=True, max_length=6, null=True, verbose_name="country code"
                    ),
                ),
                (
                    "staff_role",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("FPR", "FACULTY PRESIDENT"),
                            ("DPR", "DEPARTMENT PRESIDENT"),
                            ("GAD", "GENERAL ADMIN"),
                        ],
                        max_length=100,
                        null=True,
                        verbose_name="user role",
                    ),
                ),
                ("is_admin", models.BooleanField(default=False, verbose_name="admin")),
                (
                    "is_verified",
                    models.BooleanField(default=False, verbose_name="verified"),
                ),
                (
                    "is_active",
                    models.BooleanField(default=False, verbose_name="active"),
                ),
                (
                    "is_superuser",
                    models.BooleanField(default=False, verbose_name="superuser"),
                ),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "created_date",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="created date"
                    ),
                ),
                (
                    "updated_date",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="updated date"
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
            },
            managers=[
                ("objects", user.manager.UserManager()),
            ],
        ),
    ]
